{"version":3,"sources":["NameForm.js","Canvas.js","ImageCarousel.js","App.js","reportWebVitals.js","index.js"],"names":["NameForm","props","handleFirstNameChange","bind","handleLastNameChange","handlePronounsChange","e","this","onFirstNameChange","target","value","onLastNameChange","onPronounsChange","firstName","lastName","pronouns","Form","Row","Control","onChange","placeholder","size","type","Component","Canvas","ref","canvasRef","useRef","previewRef","useEffect","canvas","current","context","getContext","rescaleCanvas","width","height","clearRect","window","innerWidth","innerHeight","imgURL","backgroundImage","img","Image","crossOrigin","src","onload","drawImage","textAlign","fillStyle","font","fillText","toDataURL","ratio","getPixelRatio","getComputedStyle","getPropertyValue","slice","scale","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","devicePixelRatio","useImperativeHandle","downloadImage","data","a","document","createElement","href","download","click","body","appendChild","console","log","style","display","alt","className","forwardRef","ImageCarousel","useState","index","setIndex","images","Carousel","activeIndex","onSelect","selectedIndex","onBackgroundImageSelect","interval","slide","map","imageSrc","Item","App","setFirstName","setLastName","setPronouns","setBackgroundImage","Navbar","bg","variant","Brand","process","Container","marginTop","fontSize","Col","Button","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cdeb84c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport default class NameForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleFirstNameChange = this.handleFirstNameChange.bind(this);\r\n        this.handleLastNameChange = this.handleLastNameChange.bind(this);\r\n        this.handlePronounsChange = this.handlePronounsChange.bind(this);\r\n    };\r\n\r\n    handleFirstNameChange(e) {\r\n        this.props.onFirstNameChange(e.target.value);\r\n    }\r\n\r\n    handleLastNameChange(e) {\r\n        this.props.onLastNameChange(e.target.value);\r\n    }\r\n\r\n    handlePronounsChange(e) {\r\n        this.props.onPronounsChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const { firstName, lastName, pronouns } = this.props;\r\n\r\n        return (\r\n            <Form>\r\n                <Form.Row>\r\n                    <Form.Control\r\n                        value={firstName}\r\n                        onChange={this.handleFirstNameChange}\r\n                        placeholder=\"First Name\"\r\n                        size='lg'\r\n                        type=\"text\" />\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Control\r\n                        value={lastName}\r\n                        onChange={this.handleLastNameChange}\r\n                        placeholder=\"Last Name\"\r\n                        size='lg'\r\n                        type=\"text\" />\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Control\r\n                        value={pronouns}\r\n                        onChange={this.handlePronounsChange}\r\n                        placeholder=\"Pronouns (optional)\"\r\n                        size='lg'\r\n                        type=\"text\" />\r\n                </Form.Row>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n","import React, { useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\r\n\r\nfunction Canvas(props, ref) {\r\n    const canvasRef = useRef(null);\r\n    const previewRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n\r\n        // rescale for hdpi screens\r\n        const [width, height] = rescaleCanvas(canvas, context);\r\n\r\n        context.clearRect(0, 0, window.innerWidth, window.innerHeight);\r\n\r\n        // draw background image\r\n        const imgURL = props.backgroundImage;\r\n        const img = new Image();\r\n        img.crossOrigin = 'Anonymous';\r\n        img.src = imgURL;\r\n        img.onload = () => {\r\n            context.drawImage(img, 0, 0, width, height)\r\n\r\n            // draw name\r\n            context.textAlign = 'right';\r\n            context.fillStyle = '#FFF';\r\n            context.font = 'bold 150px Arial';\r\n            context.fillText(props.firstName, width - 50, 150, width / 2);\r\n            context.font = 'bold 100px Arial';\r\n            context.fillText(props.lastName, width - 50, 270, width / 2);\r\n            if (props.pronouns) {\r\n                context.font = 'bold 50px Arial';\r\n                context.fillText(`(${props.pronouns})`, width - 50, 350, width / 2);\r\n            }\r\n\r\n            // convert canvas into preview image\r\n            const preview = previewRef.current;\r\n            preview.src = canvas.toDataURL('image/png');\r\n        };\r\n    })\r\n\r\n    const rescaleCanvas = (canvas, context) => {\r\n        const ratio = getPixelRatio(context);\r\n        const width = getComputedStyle(canvas).getPropertyValue('width').slice(0, -2);\r\n        const height = getComputedStyle(canvas).getPropertyValue('height').slice(0, -2);\r\n        canvas.width = width * ratio;\r\n        canvas.height = height * ratio;\r\n        context.scale(ratio, ratio);\r\n        return [width, height];\r\n    };\r\n\r\n    const getPixelRatio = context => {\r\n        var backingStore =\r\n            context.backingStorePixelRatio ||\r\n            context.webkitBackingStorePixelRatio ||\r\n            context.mozBackingStorePixelRatio ||\r\n            context.msBackingStorePixelRatio ||\r\n            context.oBackingStorePixelRatio ||\r\n            1;\r\n        return (window.devicePixelRatio || 1) / backingStore;\r\n    };\r\n\r\n    useImperativeHandle(\r\n        ref,\r\n        () => ({\r\n            downloadImage() {\r\n                const preview = previewRef.current;\r\n                const data = preview.src;\r\n\r\n                const a = document.createElement('a');\r\n                a.href = data;\r\n                a.download = 'wit_background.png';\r\n                a.click();\r\n                document.body.appendChild(a);\r\n                console.log(\"Save!\");\r\n            }\r\n        })\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <canvas\r\n                ref={canvasRef}\r\n                style={{ width: 1920, height: 1080, display: 'none' }}\r\n            />\r\n            <img\r\n                alt=''\r\n                className='auto-resize'\r\n                ref={previewRef}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n// eslint-disable-next-line no-func-assign\r\nCanvas = forwardRef(Canvas);\r\n\r\nexport default Canvas;\r\n","import { useState } from 'react';\r\nimport { Carousel } from 'react-bootstrap';\r\n\r\nfunction ImageCarousel(props) {\r\n    const [index, setIndex] = useState(0);\r\n    const images = [\"https://virtualbackdrop.s3.amazonaws.com/wit_background_1.png\",\r\n        \"https://virtualbackdrop.s3.amazonaws.com/wit_background_2.png\",\r\n        \"https://virtualbackdrop.s3.amazonaws.com/wit_background_3.png\",\r\n        \"https://virtualbackdrop.s3.amazonaws.com/wit_background_4.png\"\r\n    ]\r\n\r\n    const handleSelect = (selectedIndex, e) => {\r\n        setIndex(selectedIndex);\r\n        props.onBackgroundImageSelect(images[selectedIndex]);\r\n    };\r\n\r\n    return (\r\n        <Carousel\r\n            activeIndex={index}\r\n            onSelect={handleSelect}\r\n            interval={null}\r\n            slide={false} >\r\n            {images.map((imageSrc) =>\r\n                <Carousel.Item key={imageSrc}>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={imageSrc}\r\n                        alt=\"\"\r\n                    />\r\n                </Carousel.Item>\r\n            )}\r\n        </Carousel >\r\n    );\r\n}\r\n\r\nexport default ImageCarousel;","import './App.css';\nimport React, { useState, useRef } from 'react'\nimport NameForm from './NameForm';\nimport Canvas from './Canvas';\nimport ImageCarousel from './ImageCarousel';\nimport { Container, Row, Col, Button, Navbar } from 'react-bootstrap';\n\nfunction App() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [pronouns, setPronouns] = useState('');\n  const [backgroundImage, setBackgroundImage] = useState(\"https://virtualbackdrop.s3.amazonaws.com/wit_background_1.png\");\n\n  function handleFirstNameChange(firstName) {\n    setFirstName(firstName);\n  }\n\n  function handleLastNameChange(lastName) {\n    setLastName(lastName);\n  }\n\n  function handlePronounsChange(pronouns) {\n    setPronouns(pronouns);\n  }\n\n  const canvasRef = useRef(null);\n  const onSaveClick = () => {\n    canvasRef.current.downloadImage();\n  }\n\n  function handleBackgroundImageSelect(backgroundImage) {\n    setBackgroundImage(backgroundImage);\n  }\n\n  return (\n    <div className=\"App\" >\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>\n          <h1>\n            <img\n              alt=\"logo\"\n              src={process.env.PUBLIC_URL + '/wit_logo.png'}\n              width=\"50\"\n              height=\"50\"\n              className=\"d-inline-block align-center\"\n            />\n            Remote Classroom Background Generator\n          </h1>\n        </Navbar.Brand>\n      </Navbar>\n      <Container>\n        <Row style={{ marginTop: 24 }}>\n          <p>\n            This tool has been created to enable students to generate an approved virtual background to use in classroom Zoom sessions. Your name is intended to be highly visible even when other participants are using a grid like view of the classroom. When using this background please situate yourself in such a way to minimize overlap with the name, which will always stay in a minimal one-third area of the top corner of your screen.\n          </p>\n          <p style={{ fontSize: 15 }}>\n            <strong>Note: </strong>It does not matter if you use the \"Mirror\" option within Zoom. The text will always display correctly to other participants.\n          </p>\n          <p>\n            After you are happy with your new virtual background use the \"Save\" button to save it to your local machine. Set it as your virtual background in your Zoom settings.\n          </p>\n        </Row>\n        <Row>\n          <Col>\n            <NameForm\n              firstName={firstName}\n              onFirstNameChange={handleFirstNameChange}\n              lastName={lastName}\n              onLastNameChange={handleLastNameChange}\n              pronouns={pronouns}\n              onPronounsChange={handlePronounsChange}\n            />\n            <ImageCarousel\n              backgroundImage={backgroundImage}\n              onBackgroundImageSelect={handleBackgroundImageSelect}\n            />\n          </Col>\n          <Col>\n            <Row>\n              <Canvas\n                ref={canvasRef}\n                firstName={firstName}\n                lastName={lastName}\n                pronouns={pronouns}\n                backgroundImage={backgroundImage}\n              />\n            </Row>\n            <Row>\n              <Button variant='secondary' onClick={onSaveClick}>Save Image</Button>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}